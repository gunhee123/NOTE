[스프링부트]_feat.ChatGPT

[DI] (Dependency Injection / 의존성 주입)

1. 의존성이란 무엇인가?
의존성(Dependency)은 소프트웨어 개발에서 하나의 모듈 또는 클래스가 다른 모듈 또는 클래스에 의존하는 관계를 의미합니다. 즉, 한 요소가 다른 요소를 사용하거나 참조하는 상태를 의미합니다.

의존성 주입을 사용하면 객체 간의 결합도를 낮추고 코드의 유연성과 재사용성을 높일 수 있습니다. 또한 테스트 용이성을 향상시키고 애플리케이션을 더 확장 가능하게 만들 수 있습니다. 


2-1. 스프링, 스프링부트를 사용하지 않고 의존성 주입하는 방법
 - 생성자 주입(Constructor Injection): 클래스의 생성자를 통해 의존성을 주입하는 방법입니다. 클래스를 생성할 때 필요한 의존성을 생성자 파라미터로 받아서 주입합니다.
 - 세터 주입(Setter Injection): 세터 메서드를 통해 의존성을 주입하는 방법입니다. 클래스에 세터 메서드를 정의하고, 의존성을 주입할 때 해당 세터 메서드를 호출하여 주입합니다.
 - 인터페이스 주입(Interface Injection): 인터페이스를 통해 의존성을 주입하는 방법으로, 클래스가 해당 인터페이스를 구현하여 의존성을 주입받습니다.

2-2-1. 스프링을 사용하여 의존성 주입
2-2-2. XML 설정 파일에 Bean 정의
```
    <!-- MyRepository 빈 설정 -->
    <bean id="myRepository" class="com.example.MyRepository"/>
```
2-2-3. Config 클래스를 통해 의존성 주입
```
    @Bean
    public MyService myService() {
        MyService myService = new MyService();
        myService.setMyRepository(myRepository());
        return myService;
    }
```

[IOC] (Inversion of Control / 제어의 역전)



[스프링과 스프링부트의 차이] : 스프링부트는 기본 설정이 되어있다.
스프링부트에는 웹 서버를 내장하고 있다. (Tomcat, Jetty, Undertow 등)

1. 웹 서버의 내장 : Tomcat, Jetty, Undertow 등 웹 서버 내장

2. 자동 구성 : 클래스 패스에 존재하는 라이브러리들을 스캔하고, 자동으로 적절한 설정을 해준다. 따라서 별도의 설정을 하지 않아도 자동으로 필요한 Bean들을 생성하고 의존성 주입
(클래스패스 : JVM이 클래스 파일과 리소스 파일을 찾기 위해 검색하는 경로들의 집합. / 환경변수, 명령어옵션, 빌드도구설정 등을 통해 지정 가능 또는 @Profile 어노테이션 이용하여 지정)

3. 의존성 관리 : 의존성 관리를 자동화. 의존성들의 버전을 자동으로 관리하고 호환되는 버전들을 함께 제공해주기 때문에 추가적인 설정 없이 라이브러리를 쉽게 추가할 수 있다.

4. 프로파일 : (애플리케이션의 다양한 실행 환경을 구분하여 설정할 수 있는 기능)
여러 환경에서 애플리케이션을 실행하고 관리하기 위해 프로파일 기능 제공. 프로파일을 사용하여 개발, 테스트, 운영 등 다양한 환경에서 다른 설정들을 구성

5. Actuator : 애플리케이션의 상태 모니터링, 관리 기능을 제공. 애플리케이션의 상태 확인, 모니터링하고 운영과 관리를 용이하게 한다.


애플리케이션 : 개발된 SW (웹 애플리케이션, 모바일 앱, 데스크톱 프로그램 등)





